/home/kw6487/.conda/envs/contrastive_reasoners/lib/python3.10/site-packages/transformers/utils/hub.py:105: FutureWarning: Using `TRANSFORMERS_CACHE` is deprecated and will be removed in v5 of Transformers. Use `HF_HOME` instead.
  warnings.warn(
Loading checkpoint shards:   0%|          | 0/4 [00:00<?, ?it/s]Loading checkpoint shards:  25%|██▌       | 1/4 [00:06<00:19,  6.56s/it]Loading checkpoint shards:  50%|█████     | 2/4 [00:12<00:12,  6.08s/it]Loading checkpoint shards:  75%|███████▌  | 3/4 [00:17<00:05,  5.88s/it]Loading checkpoint shards: 100%|██████████| 4/4 [00:18<00:00,  3.61s/it]Loading checkpoint shards: 100%|██████████| 4/4 [00:18<00:00,  4.52s/it]
Loading checkpoint shards:   0%|          | 0/4 [00:00<?, ?it/s]Loading checkpoint shards:  25%|██▌       | 1/4 [00:02<00:08,  2.95s/it]Loading checkpoint shards:  50%|█████     | 2/4 [00:05<00:05,  2.92s/it]Loading checkpoint shards:  75%|███████▌  | 3/4 [00:08<00:02,  2.90s/it]Loading checkpoint shards: 100%|██████████| 4/4 [00:08<00:00,  2.20s/it]
Pairwise Q values:
 tensor([[13497.8271, 13171.6035, 12769.6631],
        [13676.5205, 13532.8076, 13055.7930],
        [14141.7139, 14100.8848, 13828.1572]], device='cuda:0')
Traceback (most recent call last):
  File "/scratch/gpfs/kw6487/ContrastiveReasoners/critic4.py", line 136, in <module>
    loss = critic.train_step(s_texts, a_texts, g_texts, optimizer)
  File "/scratch/gpfs/kw6487/ContrastiveReasoners/critic4.py", line 109, in train_step
    loss.backward()
  File "/home/kw6487/.conda/envs/contrastive_reasoners/lib/python3.10/site-packages/torch/_tensor.py", line 626, in backward
    torch.autograd.backward(
  File "/home/kw6487/.conda/envs/contrastive_reasoners/lib/python3.10/site-packages/torch/autograd/__init__.py", line 347, in backward
    _engine_run_backward(
  File "/home/kw6487/.conda/envs/contrastive_reasoners/lib/python3.10/site-packages/torch/autograd/graph.py", line 823, in _engine_run_backward
    return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 224.00 MiB. GPU 0 has a total capacity of 79.25 GiB of which 62.75 MiB is free. Including non-PyTorch memory, this process has 79.18 GiB memory in use. Of the allocated memory 78.66 GiB is allocated by PyTorch, and 28.04 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
